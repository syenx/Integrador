<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simplify.Repository.FluentNHibernate</name>
    </assembly>
    <members>
        <member name="T:Simplify.Repository.FluentNHibernate.Entities.IdentityObject">
            <summary>
            Provides object with identifier
            </summary>
        </member>
        <member name="P:Simplify.Repository.FluentNHibernate.Entities.IdentityObject.ID">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Simplify.Repository.FluentNHibernate.Entities.NamedObject">
            <summary>
            Provides object with name
            </summary>
        </member>
        <member name="P:Simplify.Repository.FluentNHibernate.Entities.NamedObject.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Simplify.Repository.FluentNHibernate.FactoryManagerBase">
            <summary>
            Base ckass for session factory managers
            </summary>
        </member>
        <member name="P:Simplify.Repository.FluentNHibernate.FactoryManagerBase.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.FactoryManagerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Simplify.Repository.FluentNHibernate.Mappings.IdentityObjectMap`1">
            <summary>
            Identity object mapping
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Mappings.IdentityObjectMap`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simplify.Repository.FluentNHibernate.Mappings.IdentityObjectMap`1"/> class.
            </summary>
        </member>
        <member name="T:Simplify.Repository.FluentNHibernate.Mappings.NamedObjectMap`1">
            <summary>
            Named object mapping
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Mappings.NamedObjectMap`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simplify.Repository.FluentNHibernate.Mappings.NamedObjectMap`1"/> class.
            </summary>
        </member>
        <member name="T:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1">
            <summary>
            Provides generic repository pattern for easy NHibernate repositories implementation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.Session">
            <summary>
            The NHibernate session
            </summary>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.#ctor(NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.GetSingleByID(System.Object)">
            <summary>
            Gets the single object by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.GetSingleByIDExclusive(System.Object)">
            <summary>
            Gets the single by object identifier exclusively.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.GetSingleByQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the single object by query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.GetFirstByQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the first object by query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.GetMultipleByQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the multiple objects by query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.GetMultipleByQueryOrderedList``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Gets the multiple objects by query.
            </summary>
            <typeparam name="TOrder">The type of the order.</typeparam>
            <param name="query">The query.</param>
            <param name="orderFunc">The ordering function.</param>
            <param name="orderDescending">if set to <c>true</c> then will be sorted descending.</param>
            <returns></returns>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.Add(`0)">
            <summary>
            Adds the object.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.AddOrUpdate(`0)">
            <summary>
            Adds or update the object.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.Delete(`0)">
            <summary>
            Deletes the object.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.Repositories.GenericRepository`1.Update(`0)">
            <summary>
            Updates the object.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Simplify.Repository.FluentNHibernate.UnitOfWork">
            <summary>
            Provides unit of work
            </summary>
        </member>
        <member name="P:Simplify.Repository.FluentNHibernate.UnitOfWork.Session">
            <summary>
            Gets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.UnitOfWork.#ctor(NHibernate.ISessionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplify.Repository.FluentNHibernate.UnitOfWork"/> class.
            </summary>
            <param name="sessionFactory">The session factory.</param>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.UnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Simplify.Repository.FluentNHibernate.TransactUnitOfWork">
            <summary>
            Provides unit of work with auto-open transaction
            </summary>
        </member>
        <member name="P:Simplify.Repository.FluentNHibernate.TransactUnitOfWork.Session">
            <summary>
            Gets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.TransactUnitOfWork.#ctor(NHibernate.ISessionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplify.Repository.FluentNHibernate.TransactUnitOfWork"/> class.
            </summary>
            <param name="sessionFactory">The session factory.</param>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.TransactUnitOfWork.Commit">
            <summary>
            Commits transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">Oops! We don't have an active transaction</exception>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.TransactUnitOfWork.Rollback">
            <summary>
            Rollbacks transaction.
            </summary>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.TransactUnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Simplify.Repository.FluentNHibernate.BeginTransactUnitOfWork">
            <summary>
            Provides unit of work with manual open transaction
            </summary>
        </member>
        <member name="P:Simplify.Repository.FluentNHibernate.BeginTransactUnitOfWork.Session">
            <summary>
            Gets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.BeginTransactUnitOfWork.#ctor(NHibernate.ISessionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplify.Repository.FluentNHibernate.BeginTransactUnitOfWork"/> class.
            </summary>
            <param name="sessionFactory">The session factory.</param>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.BeginTransactUnitOfWork.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.BeginTransactUnitOfWork.Commit">
            <summary>
            Commits transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">Oops! We don't have an active transaction</exception>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.BeginTransactUnitOfWork.Rollback">
            <summary>
            Rollbacks transaction.
            </summary>
        </member>
        <member name="M:Simplify.Repository.FluentNHibernate.BeginTransactUnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
